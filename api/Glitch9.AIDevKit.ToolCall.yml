### YamlMime:ManagedReference
items:
- uid: Glitch9.AIDevKit.ToolCall
  commentId: T:Glitch9.AIDevKit.ToolCall
  id: ToolCall
  parent: Glitch9.AIDevKit
  children:
  - Glitch9.AIDevKit.ToolCall.Id
  - Glitch9.AIDevKit.ToolCall.Type
  langs:
  - csharp
  - vb
  name: ToolCall
  nameWithType: ToolCall
  fullName: Glitch9.AIDevKit.ToolCall
  type: Class
  source:
    id: ToolCall
    path: E:/UnityProjects/Glitch9/AIDevKit-Unity6/Assets/Glitch9/AIDevKit/Runtime/Scripts/Common/Models/Completion/Tool/ToolCall.cs
    startLine: 17
  namespace: Glitch9.AIDevKit
  syntax:
    content: public abstract class ToolCall
    content.vb: Public MustInherit Class ToolCall
  inheritance:
  - System.Object
  derivedClasses:
  - Glitch9.AIDevKit.FunctionCall
  - Glitch9.AIDevKit.OpenAI.CodeInterpreterCall
  - Glitch9.AIDevKit.OpenAI.FileSearchCall
- uid: Glitch9.AIDevKit.ToolCall.Id
  commentId: P:Glitch9.AIDevKit.ToolCall.Id
  id: Id
  parent: Glitch9.AIDevKit.ToolCall
  langs:
  - csharp
  - vb
  name: Id
  nameWithType: ToolCall.Id
  fullName: Glitch9.AIDevKit.ToolCall.Id
  type: Property
  source:
    id: Id
    path: E:/UnityProjects/Glitch9/AIDevKit-Unity6/Assets/Glitch9/AIDevKit/Runtime/Scripts/Common/Models/Completion/Tool/ToolCall.cs
    startLine: 22
  namespace: Glitch9.AIDevKit
  summary: Required. The unique identifier of the tool.
  example: []
  syntax:
    content: public string Id { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property Id As String
  overload: Glitch9.AIDevKit.ToolCall.Id*
- uid: Glitch9.AIDevKit.ToolCall.Type
  commentId: P:Glitch9.AIDevKit.ToolCall.Type
  id: Type
  parent: Glitch9.AIDevKit.ToolCall
  langs:
  - csharp
  - vb
  name: Type
  nameWithType: ToolCall.Type
  fullName: Glitch9.AIDevKit.ToolCall.Type
  type: Property
  source:
    id: Type
    path: E:/UnityProjects/Glitch9/AIDevKit-Unity6/Assets/Glitch9/AIDevKit/Runtime/Scripts/Common/Models/Completion/Tool/ToolCall.cs
    startLine: 27
  namespace: Glitch9.AIDevKit
  summary: Required. The type of the tool.
  example: []
  syntax:
    content: public ToolType Type { get; set; }
    parameters: []
    return:
      type: Glitch9.AIDevKit.ToolType
    content.vb: Public Property Type As ToolType
  overload: Glitch9.AIDevKit.ToolCall.Type*
references:
- uid: Glitch9.AIDevKit
  commentId: N:Glitch9.AIDevKit
  href: Glitch9.html
  name: Glitch9.AIDevKit
  nameWithType: Glitch9.AIDevKit
  fullName: Glitch9.AIDevKit
  spec.csharp:
  - uid: Glitch9
    name: Glitch9
    href: Glitch9.html
  - name: .
  - uid: Glitch9.AIDevKit
    name: AIDevKit
    href: Glitch9.AIDevKit.html
  spec.vb:
  - uid: Glitch9
    name: Glitch9
    href: Glitch9.html
  - name: .
  - uid: Glitch9.AIDevKit
    name: AIDevKit
    href: Glitch9.AIDevKit.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: Glitch9.AIDevKit.ToolCall.Id*
  commentId: Overload:Glitch9.AIDevKit.ToolCall.Id
  href: Glitch9.AIDevKit.ToolCall.html#Glitch9_AIDevKit_ToolCall_Id
  name: Id
  nameWithType: ToolCall.Id
  fullName: Glitch9.AIDevKit.ToolCall.Id
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: Glitch9.AIDevKit.ToolCall.Type*
  commentId: Overload:Glitch9.AIDevKit.ToolCall.Type
  href: Glitch9.AIDevKit.ToolCall.html#Glitch9_AIDevKit_ToolCall_Type
  name: Type
  nameWithType: ToolCall.Type
  fullName: Glitch9.AIDevKit.ToolCall.Type
- uid: Glitch9.AIDevKit.ToolType
  commentId: T:Glitch9.AIDevKit.ToolType
  parent: Glitch9.AIDevKit
  href: Glitch9.AIDevKit.ToolType.html
  name: ToolType
  nameWithType: ToolType
  fullName: Glitch9.AIDevKit.ToolType
